package io.liftgate.server.token

import io.liftgate.server.LiftgateEngine
import io.liftgate.server.startup.StartupStep
import io.liftgate.server.logger
import java.io.File
import java.nio.file.Files

/**
 * @author GrowlyX
 * @since 8/15/2022
 */
object TokenGeneratorStep : StartupStep
{
    override fun perform(context: LiftgateEngine)
    {
        val tokenPath = File("token.txt")

        if (!tokenPath.exists())
        {
            logger.info("[Token] Generating new client -> server authorization token at: [token.txt]")

            val generated = TokenGenerator.generate()
            Files.write(tokenPath.toPath(), generated.toByteArray())

            logger.info(
                """
                    [Token] Successfully generated new token.
                     - This token will be used to authenticate client -> server RPC interactions. Do not shared this token.
                     - A new token may be regenerated by simply deleting the current "token.txt" file.
                """.trimIndent()
            )
        }

        val decoded = Files
            .readAllBytes(tokenPath.toPath())
            .decodeToString()

        TokenGenerator.cached = decoded
    }
}
